/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"x":3,"NUMBER":4,"y":5,"z":6,"m":7,"point":8,"file":9,"geometry_tts":10,"EOF":11,"geometry_tt":12,"point_tt":13,"linestring_tt":14,"polygon_tt":15,"triangle_tt":16,"polyhedralsurface_tt":17,"tin_tt":18,"multipoint_tt":19,"multilinestring_tt":20,"multipolygon_tt":21,"geometrycollection_tt":22,"POINT":23,"point_text":24,"LINESTRING":25,"linestring_text":26,"POLYGON":27,"polygon_text":28,"TRIANGLE":29,"triangle_text":30,"POLYHEDRALSURFACE":31,"polyhedralsurface_text":32,"TIN":33,"tin_text":34,"MULTIPOINT":35,"multipoint_text":36,"MULTILINESTRING":37,"multilinestring_text":38,"MULTIPOLYGON":39,"multipolygon_text":40,"GEOMETRYCOLLECTION":41,"geometrycollection_text":42,"EMPTY_SET":43,"(":44,")":45,"point_list":46,",":47,"linestring_text_list":48,"polygon_text_list":49,"point_text_list":50,"geometry_tt_list":51,"point_z":52,"geometry_tt_z":53,"point_tt_z":54,"linestring_tt_z":55,"polygon_tt_z":56,"triangle_tt_z":57,"polyhedralsurface_tt_z":58,"tin_tt_z":59,"multipoint_tt_z":60,"multilinestring_tt_z":61,"multipolygon_tt_z":62,"geometrycollection_tt_z":63,"Z":64,"point_text_z":65,"linestring_text_z":66,"polygon_text_z":67,"triangle_text_z":68,"polyhedralsurface_text_z":69,"tin_text_z":70,"multipoint_text_z":71,"multilinestring_text_z":72,"multipolygon_text_z":73,"geometrycollection_text_z":74,"point_list_z":75,"linestring_text_list_z":76,"polygon_text_list_z":77,"point_text_list_z":78,"geometry_tt_list_z":79,"point_m":80,"geometry_tt_m":81,"point_tt_m":82,"linestring_tt_m":83,"polygon_tt_m":84,"triangle_tt_m":85,"polyhedralsurface_tt_m":86,"tin_tt_m":87,"multipoint_tt_m":88,"multilinestring_tt_m":89,"multipolygon_tt_m":90,"geometrycollection_tt_m":91,"M":92,"point_text_m":93,"linestring_text_m":94,"polygon_text_m":95,"triangle_text_m":96,"polyhedralsurface_text_m":97,"tin_text_m":98,"multipoint_text_m":99,"multilinestring_text_m":100,"multipolygon_text_m":101,"geometrycollection_text_m":102,"point_list_m":103,"linestring_text_list_m":104,"polygon_text_list_m":105,"point_text_list_m":106,"geometry_tt_list_m":107,"point_zm":108,"geometry_tt_zm":109,"point_tt_zm":110,"linestring_tt_zm":111,"polygon_tt_zm":112,"triangle_tt_zm":113,"polyhedralsurface_tt_zm":114,"tin_tt_zm":115,"multipoint_tt_zm":116,"multilinestring_tt_zm":117,"multipolygon_tt_zm":118,"geometrycollection_tt_zm":119,"ZM":120,"point_text_zm":121,"linestring_text_zm":122,"polygon_text_zm":123,"triangle_text_zm":124,"polyhedralsurface_text_zm":125,"tin_text_zm":126,"multipoint_text_zm":127,"multilinestring_text_zm":128,"multipolygon_text_zm":129,"geometrycollection_text_zm":130,"point_list_zm":131,"linestring_text_list_zm":132,"polygon_text_list_zm":133,"point_text_list_zm":134,"geometry_tt_list_zm":135,"$accept":0,"$end":1},
terminals_: {2:"error",4:"NUMBER",11:"EOF",23:"POINT",25:"LINESTRING",27:"POLYGON",29:"TRIANGLE",30:"triangle_text",31:"POLYHEDRALSURFACE",33:"TIN",34:"tin_text",35:"MULTIPOINT",37:"MULTILINESTRING",39:"MULTIPOLYGON",41:"GEOMETRYCOLLECTION",43:"EMPTY_SET",44:"(",45:")",47:",",64:"Z",68:"triangle_text_z",70:"tin_text_z",92:"M",96:"triangle_text_m",98:"tin_text_m",120:"ZM",124:"triangle_text_zm",126:"tin_text_zm"},
productions_: [0,[3,1],[5,1],[6,1],[7,1],[8,2],[9,2],[10,1],[10,2],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[12,1],[13,2],[14,2],[15,2],[16,2],[17,2],[18,2],[19,2],[20,2],[21,2],[22,2],[24,1],[24,3],[46,1],[46,3],[26,1],[26,3],[48,1],[48,3],[28,1],[28,3],[49,1],[49,3],[32,1],[32,3],[50,1],[50,3],[36,1],[36,3],[36,3],[38,1],[38,3],[40,1],[40,3],[51,1],[51,3],[42,1],[42,3],[52,3],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[53,1],[54,3],[55,3],[56,3],[57,3],[58,3],[59,3],[60,3],[61,3],[62,3],[63,3],[65,1],[65,3],[75,1],[75,3],[66,1],[66,3],[76,1],[76,3],[67,1],[67,3],[77,1],[77,3],[69,1],[69,3],[78,1],[78,3],[71,1],[71,3],[72,1],[72,3],[73,1],[73,3],[79,1],[79,3],[74,1],[74,3],[80,3],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[81,1],[82,3],[83,3],[84,3],[85,3],[86,3],[87,3],[88,3],[89,3],[90,3],[91,3],[93,1],[93,3],[103,1],[103,3],[94,1],[94,3],[104,1],[104,3],[95,1],[95,3],[105,1],[105,3],[97,1],[97,3],[106,1],[106,3],[99,1],[99,3],[100,1],[100,3],[101,1],[101,3],[107,1],[107,3],[102,1],[102,3],[108,4],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[109,1],[110,3],[111,3],[112,3],[113,3],[114,3],[115,3],[116,3],[117,3],[118,3],[119,3],[121,1],[121,3],[131,1],[131,3],[122,1],[122,3],[132,1],[132,3],[123,1],[123,3],[133,1],[133,3],[125,1],[125,3],[134,1],[134,3],[127,1],[127,3],[128,1],[128,3],[129,1],[129,3],[135,1],[135,3],[130,1],[130,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{9:1,10:2,12:3,13:4,14:5,15:6,16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:[1,14],25:[1,15],27:[1,16],29:[1,17],31:[1,18],33:[1,19],35:[1,20],37:[1,21],39:[1,22],41:[1,23]},{1:[3]},{11:[1,24]},{10:25,11:[2,7],12:3,13:4,14:5,15:6,16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:[1,14],25:[1,15],27:[1,16],29:[1,17],31:[1,18],33:[1,19],35:[1,20],37:[1,21],39:[1,22],41:[1,23]},{11:[2,9],23:[2,9],25:[2,9],27:[2,9],29:[2,9],31:[2,9],33:[2,9],35:[2,9],37:[2,9],39:[2,9],41:[2,9],45:[2,9],47:[2,9]},{11:[2,10],23:[2,10],25:[2,10],27:[2,10],29:[2,10],31:[2,10],33:[2,10],35:[2,10],37:[2,10],39:[2,10],41:[2,10],45:[2,10],47:[2,10]},{11:[2,11],23:[2,11],25:[2,11],27:[2,11],29:[2,11],31:[2,11],33:[2,11],35:[2,11],37:[2,11],39:[2,11],41:[2,11],45:[2,11],47:[2,11]},{11:[2,12],23:[2,12],25:[2,12],27:[2,12],29:[2,12],31:[2,12],33:[2,12],35:[2,12],37:[2,12],39:[2,12],41:[2,12],45:[2,12],47:[2,12]},{11:[2,13],23:[2,13],25:[2,13],27:[2,13],29:[2,13],31:[2,13],33:[2,13],35:[2,13],37:[2,13],39:[2,13],41:[2,13],45:[2,13],47:[2,13]},{11:[2,14],23:[2,14],25:[2,14],27:[2,14],29:[2,14],31:[2,14],33:[2,14],35:[2,14],37:[2,14],39:[2,14],41:[2,14],45:[2,14],47:[2,14]},{11:[2,15],23:[2,15],25:[2,15],27:[2,15],29:[2,15],31:[2,15],33:[2,15],35:[2,15],37:[2,15],39:[2,15],41:[2,15],45:[2,15],47:[2,15]},{11:[2,16],23:[2,16],25:[2,16],27:[2,16],29:[2,16],31:[2,16],33:[2,16],35:[2,16],37:[2,16],39:[2,16],41:[2,16],45:[2,16],47:[2,16]},{11:[2,17],23:[2,17],25:[2,17],27:[2,17],29:[2,17],31:[2,17],33:[2,17],35:[2,17],37:[2,17],39:[2,17],41:[2,17],45:[2,17],47:[2,17]},{11:[2,18],23:[2,18],25:[2,18],27:[2,18],29:[2,18],31:[2,18],33:[2,18],35:[2,18],37:[2,18],39:[2,18],41:[2,18],45:[2,18],47:[2,18]},{24:26,43:[1,27],44:[1,28]},{26:29,43:[1,30],44:[1,31]},{28:32,43:[1,33],44:[1,34]},{30:[1,35]},{32:36,43:[1,37],44:[1,38]},{34:[1,39]},{36:40,43:[1,41],44:[1,42]},{38:43,43:[1,44],44:[1,45]},{40:46,43:[1,47],44:[1,48]},{42:49,43:[1,50],44:[1,51]},{1:[2,6]},{11:[2,8]},{11:[2,19],23:[2,19],25:[2,19],27:[2,19],29:[2,19],31:[2,19],33:[2,19],35:[2,19],37:[2,19],39:[2,19],41:[2,19],45:[2,19],47:[2,19]},{11:[2,29],23:[2,29],25:[2,29],27:[2,29],29:[2,29],31:[2,29],33:[2,29],35:[2,29],37:[2,29],39:[2,29],41:[2,29],45:[2,29],47:[2,29]},{3:53,4:[1,54],8:52},{11:[2,20],23:[2,20],25:[2,20],27:[2,20],29:[2,20],31:[2,20],33:[2,20],35:[2,20],37:[2,20],39:[2,20],41:[2,20],45:[2,20],47:[2,20]},{11:[2,33],23:[2,33],25:[2,33],27:[2,33],29:[2,33],31:[2,33],33:[2,33],35:[2,33],37:[2,33],39:[2,33],41:[2,33],45:[2,33],47:[2,33]},{3:53,4:[1,54],8:56,46:55},{11:[2,21],23:[2,21],25:[2,21],27:[2,21],29:[2,21],31:[2,21],33:[2,21],35:[2,21],37:[2,21],39:[2,21],41:[2,21],45:[2,21],47:[2,21]},{11:[2,37],23:[2,37],25:[2,37],27:[2,37],29:[2,37],31:[2,37],33:[2,37],35:[2,37],37:[2,37],39:[2,37],41:[2,37],45:[2,37],47:[2,37]},{26:58,43:[1,30],44:[1,31],48:57},{11:[2,22],23:[2,22],25:[2,22],27:[2,22],29:[2,22],31:[2,22],33:[2,22],35:[2,22],37:[2,22],39:[2,22],41:[2,22],45:[2,22],47:[2,22]},{11:[2,23],23:[2,23],25:[2,23],27:[2,23],29:[2,23],31:[2,23],33:[2,23],35:[2,23],37:[2,23],39:[2,23],41:[2,23],45:[2,23],47:[2,23]},{11:[2,41],23:[2,41],25:[2,41],27:[2,41],29:[2,41],31:[2,41],33:[2,41],35:[2,41],37:[2,41],39:[2,41],41:[2,41],45:[2,41],47:[2,41]},{28:60,43:[1,33],44:[1,34],49:59},{11:[2,24],23:[2,24],25:[2,24],27:[2,24],29:[2,24],31:[2,24],33:[2,24],35:[2,24],37:[2,24],39:[2,24],41:[2,24],45:[2,24],47:[2,24]},{11:[2,25],23:[2,25],25:[2,25],27:[2,25],29:[2,25],31:[2,25],33:[2,25],35:[2,25],37:[2,25],39:[2,25],41:[2,25],45:[2,25],47:[2,25]},{11:[2,45],23:[2,45],25:[2,45],27:[2,45],29:[2,45],31:[2,45],33:[2,45],35:[2,45],37:[2,45],39:[2,45],41:[2,45],45:[2,45],47:[2,45]},{3:53,4:[1,54],8:56,24:63,43:[1,27],44:[1,28],46:62,50:61},{11:[2,26],23:[2,26],25:[2,26],27:[2,26],29:[2,26],31:[2,26],33:[2,26],35:[2,26],37:[2,26],39:[2,26],41:[2,26],45:[2,26],47:[2,26]},{11:[2,48],23:[2,48],25:[2,48],27:[2,48],29:[2,48],31:[2,48],33:[2,48],35:[2,48],37:[2,48],39:[2,48],41:[2,48],45:[2,48],47:[2,48]},{26:58,43:[1,30],44:[1,31],48:64},{11:[2,27],23:[2,27],25:[2,27],27:[2,27],29:[2,27],31:[2,27],33:[2,27],35:[2,27],37:[2,27],39:[2,27],41:[2,27],45:[2,27],47:[2,27]},{11:[2,50],23:[2,50],25:[2,50],27:[2,50],29:[2,50],31:[2,50],33:[2,50],35:[2,50],37:[2,50],39:[2,50],41:[2,50],45:[2,50],47:[2,50]},{28:60,43:[1,33],44:[1,34],49:65},{11:[2,28],23:[2,28],25:[2,28],27:[2,28],29:[2,28],31:[2,28],33:[2,28],35:[2,28],37:[2,28],39:[2,28],41:[2,28],45:[2,28],47:[2,28]},{11:[2,54],23:[2,54],25:[2,54],27:[2,54],29:[2,54],31:[2,54],33:[2,54],35:[2,54],37:[2,54],39:[2,54],41:[2,54],45:[2,54],47:[2,54]},{12:67,13:4,14:5,15:6,16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:[1,14],25:[1,15],27:[1,16],29:[1,17],31:[1,18],33:[1,19],35:[1,20],37:[1,21],39:[1,22],41:[1,23],51:66},{45:[1,68]},{4:[1,70],5:69},{4:[2,1]},{45:[1,71]},{45:[2,31],47:[1,72]},{45:[1,73]},{45:[2,35],47:[1,74]},{45:[1,75]},{45:[2,39],47:[1,76]},{45:[1,77]},{45:[1,78]},{45:[2,43],47:[1,79]},{45:[1,80]},{45:[1,81]},{45:[1,82]},{45:[2,52],47:[1,83]},{11:[2,30],23:[2,30],25:[2,30],27:[2,30],29:[2,30],31:[2,30],33:[2,30],35:[2,30],37:[2,30],39:[2,30],41:[2,30],45:[2,30],47:[2,30]},{45:[2,5],47:[2,5]},{45:[2,2],47:[2,2]},{11:[2,34],23:[2,34],25:[2,34],27:[2,34],29:[2,34],31:[2,34],33:[2,34],35:[2,34],37:[2,34],39:[2,34],41:[2,34],45:[2,34],47:[2,34]},{3:53,4:[1,54],8:56,46:84},{11:[2,38],23:[2,38],25:[2,38],27:[2,38],29:[2,38],31:[2,38],33:[2,38],35:[2,38],37:[2,38],39:[2,38],41:[2,38],45:[2,38],47:[2,38]},{26:58,43:[1,30],44:[1,31],48:85},{11:[2,42],23:[2,42],25:[2,42],27:[2,42],29:[2,42],31:[2,42],33:[2,42],35:[2,42],37:[2,42],39:[2,42],41:[2,42],45:[2,42],47:[2,42]},{28:86,43:[1,33],44:[1,34]},{11:[2,46],23:[2,46],25:[2,46],27:[2,46],29:[2,46],31:[2,46],33:[2,46],35:[2,46],37:[2,46],39:[2,46],41:[2,46],45:[2,46],47:[2,46]},{11:[2,47],23:[2,47],25:[2,47],27:[2,47],29:[2,47],31:[2,47],33:[2,47],35:[2,47],37:[2,47],39:[2,47],41:[2,47],45:[2,47],47:[2,47]},{24:63,43:[1,27],44:[1,28],50:87},{11:[2,49],23:[2,49],25:[2,49],27:[2,49],29:[2,49],31:[2,49],33:[2,49],35:[2,49],37:[2,49],39:[2,49],41:[2,49],45:[2,49],47:[2,49]},{11:[2,51],23:[2,51],25:[2,51],27:[2,51],29:[2,51],31:[2,51],33:[2,51],35:[2,51],37:[2,51],39:[2,51],41:[2,51],45:[2,51],47:[2,51]},{11:[2,55],23:[2,55],25:[2,55],27:[2,55],29:[2,55],31:[2,55],33:[2,55],35:[2,55],37:[2,55],39:[2,55],41:[2,55],45:[2,55],47:[2,55]},{12:67,13:4,14:5,15:6,16:7,17:8,18:9,19:10,20:11,21:12,22:13,23:[1,14],25:[1,15],27:[1,16],29:[1,17],31:[1,18],33:[1,19],35:[1,20],37:[1,21],39:[1,22],41:[1,23],51:88},{45:[2,32]},{45:[2,36]},{45:[2,40]},{45:[2,44]},{45:[2,53]}],
defaultActions: {24:[2,6],25:[2,8],54:[2,1],84:[2,32],85:[2,36],86:[2,40],87:[2,44],88:[2,53]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 23;
break;
case 2:return 25;
break;
case 3:return 27;
break;
case 4:return 29;
break;
case 5:return 31;
break;
case 6:return 33;
break;
case 7:return 35;
break;
case 8:return 37;
break;
case 9:return 39;
break;
case 10:return 41;
break;
case 11:return 43;
break;
case 12:return 'MZ';
break;
case 13:return 92;
break;
case 14:return 64;
break;
case 15:return 44;
break;
case 16:return 45;
break;
case 17:return 47;
break;
case 18:return 4;
break;
case 19:return 11;
break;
}
},
rules: [/^(?:\s+)/,/^(?:POINT\b)/,/^(?:LINESTRING\b)/,/^(?:POLYGON\b)/,/^(?:TRIANGLE\b)/,/^(?:POLYHEDRALSURFACE\b)/,/^(?:TIN\b)/,/^(?:MULTIPOINT\b)/,/^(?:MULTILINESTRING\b)/,/^(?:MULTIPOLYGON\b)/,/^(?:GEOMETRYCOLLECTION\b)/,/^(?:EMPTY\b)/,/^(?:MZ\b)/,/^(?:M\b)/,/^(?:Z\b)/,/^(?:\()/,/^(?:\))/,/^(?:,)/,/^(?:([-+]?((([0-9]+([.,][0-9]*)?)|([.,][0-9]+))))([E][-+]?[0-9]+)?)/,/^(?:$)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}
